/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maestros;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

/**
 *
 * @author prof_tes_a
 */
public class RelMaeRel extends javax.swing.JInternalFrame
{
    private RelMaeRel_01 objMaeRel_01;

    /**
     * Creates new form RelMaeRel
     */
    public RelMaeRel()
    {
        initComponents();
        cargarEstilos();
        objMaeRel_01=new RelMaeRel_01(JOptionPane.getFrameForComponent(this), true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrMat = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        txtMar = new javax.swing.JTextField();
        butMar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cboEst = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        optMatMet = new javax.swing.JRadioButton();
        optMatPla = new javax.swing.JRadioButton();
        optMatCue = new javax.swing.JRadioButton();
        chkSisAna = new javax.swing.JCheckBox();
        chkSisDig = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaCom = new javax.swing.JTextArea();
        butAbr = new javax.swing.JButton();
        butGua = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Relojes");
        getContentPane().setLayout(null);

        jLabel1.setText("Nombre:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 104, 30);

        jLabel2.setText("Marca:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 50, 104, 30);
        getContentPane().add(txtNom);
        txtNom.setBounds(120, 10, 260, 30);

        txtMar.setEditable(false);
        txtMar.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtMar);
        txtMar.setBounds(120, 50, 260, 30);

        butMar.setText("...");
        butMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butMarActionPerformed(evt);
            }
        });
        getContentPane().add(butMar);
        butMar.setBounds(380, 50, 30, 30);

        jLabel3.setText("Comentarios:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 210, 104, 30);

        cboEst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cboEst);
        cboEst.setBounds(120, 90, 260, 30);

        jLabel4.setText("Estilos:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 90, 104, 30);

        bgrMat.add(optMatMet);
        optMatMet.setText("Metal");
        getContentPane().add(optMatMet);
        optMatMet.setBounds(320, 130, 80, 30);

        bgrMat.add(optMatPla);
        optMatPla.setSelected(true);
        optMatPla.setText("Plástico");
        getContentPane().add(optMatPla);
        optMatPla.setBounds(120, 130, 80, 30);

        bgrMat.add(optMatCue);
        optMatCue.setText("Cuero");
        getContentPane().add(optMatCue);
        optMatCue.setBounds(220, 130, 80, 30);

        chkSisAna.setText("Analógico");
        getContentPane().add(chkSisAna);
        chkSisAna.setBounds(220, 170, 80, 30);

        chkSisDig.setText("Digital");
        getContentPane().add(chkSisDig);
        chkSisDig.setBounds(120, 170, 80, 30);

        jLabel5.setText("Material:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 130, 104, 30);

        jLabel6.setText("Sistema:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 170, 104, 30);

        txaCom.setColumns(20);
        txaCom.setRows(5);
        jScrollPane1.setViewportView(txaCom);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(120, 210, 260, 90);

        butAbr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abrir.gif"))); // NOI18N
        butAbr.setText("Abrir");
        butAbr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAbrActionPerformed(evt);
            }
        });
        getContentPane().add(butAbr);
        butAbr.setBounds(270, 310, 110, 40);

        butGua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        butGua.setText("Guardar");
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        getContentPane().add(butGua);
        butGua.setBounds(120, 310, 110, 40);

        setBounds(0, 0, 430, 390);
    }// </editor-fold>//GEN-END:initComponents

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        guardarReloj();
    }//GEN-LAST:event_butGuaActionPerformed

    private void butAbrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAbrActionPerformed
        abrirReloj();
    }//GEN-LAST:event_butAbrActionPerformed

    private void butMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butMarActionPerformed
        objMaeRel_01.setVisible(true);
        if (objMaeRel_01.isClickAceptar())
            txtMar.setText(objMaeRel_01.getMarcaSeleccionada());
    }//GEN-LAST:event_butMarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrMat;
    private javax.swing.JButton butAbr;
    private javax.swing.JButton butGua;
    private javax.swing.JButton butMar;
    private javax.swing.JComboBox cboEst;
    private javax.swing.JCheckBox chkSisAna;
    private javax.swing.JCheckBox chkSisDig;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton optMatCue;
    private javax.swing.JRadioButton optMatMet;
    private javax.swing.JRadioButton optMatPla;
    private javax.swing.JTextArea txaCom;
    private javax.swing.JTextField txtMar;
    private javax.swing.JTextField txtNom;
    // End of variables declaration//GEN-END:variables

    private boolean cargarEstilos()
    {
        boolean blnRes=true;
        try
        {
            String strCon=""; //Contenido del archivo.
            java.io.FileReader objFilRea=new java.io.FileReader("Estilos.txt");
            java.io.BufferedReader objBufRea=new java.io.BufferedReader(objFilRea);
            String strLin;
            cboEst.removeAllItems();
            while((strLin=objBufRea.readLine())!=null)
            {
                cboEst.addItem(strLin);
            }
            objBufRea.close();
        }
        catch(java.io.FileNotFoundException e)
        {
            JOptionPane.showMessageDialog(this, "Excepción: " + e.toString(), "Sistema TES", JOptionPane.ERROR_MESSAGE);
            blnRes=false;
        }
        catch(java.io.IOException e)
        {
            JOptionPane.showMessageDialog(this, "Excepción: " + e.toString(), "Sistema TES", JOptionPane.ERROR_MESSAGE);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean guardarReloj()
    {
        boolean blnRes=true;
        try
        {
            String strArc;
            if (this.getTitle().equals("Relojes"))
            {
                JFileChooser objFilCho=new JFileChooser();
                objFilCho.setDialogTitle("Guardar");
                objFilCho.setFileSelectionMode(JFileChooser.FILES_ONLY);
                objFilCho.setCurrentDirectory(new File("C:\\"));
                //Filtrado (Opción 1):
                FileNameExtensionFilter objFilNamExt=new FileNameExtensionFilter("Archivos XML", "xml");
                objFilCho.setFileFilter(objFilNamExt);
                //Filtrado (Opción 2):
    //            objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos de texto", "txt"));
    //            objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos java", "java"));
    //            objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos php", "php", "php4", "phtml"));
                if (objFilCho.showSaveDialog(this)==JFileChooser.APPROVE_OPTION)
                {
                    strArc=objFilCho.getSelectedFile().getPath();
                    //Si no tiene la extensión "txt" agregarsela.
                    if (!strArc.toLowerCase().endsWith(".xml"))
                        strArc+=".xml";
                    if (guardarArcXML(strArc))
                        this.setTitle(strArc);
        //            System.out.println("Directorio seleccionado: " + strArc);
        //            System.out.println("Texto: " + ((MenArcBloNot)dskGen.getSelectedFrame()).txaPag.getText());
                }
                else
                {
                    System.out.println("El usuario canceló");
                }
            }
            else
                guardarArcXML(this.getTitle());
        }
        catch(Exception e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean guardarArcXML(String strNomArc)
    {
        boolean blnRes=true;
        try
        {
            DocumentBuilderFactory obDocBuiFac=DocumentBuilderFactory.newInstance();
            DocumentBuilder objDocBui=obDocBuiFac.newDocumentBuilder();
            DOMImplementation objDomImp=objDocBui.getDOMImplementation();
            Document objDoc=objDomImp.createDocument(null, "xml", null);
            objDoc.setXmlVersion("1.0");
            
            //Crear el nodo raíz.
            Element objNodRai=objDoc.createElement("Reloj");
            //Crear los nodos hijos.
            Element objNodNom=objDoc.createElement("Nombre");
            Element objNodMar=objDoc.createElement("Marca");
            Element objNodEst=objDoc.createElement("Estilo");
            Element objNodMat=objDoc.createElement("Material");
            Element objNodSis=objDoc.createElement("Sistema");
            Element objNodCom=objDoc.createElement("Comentarios");
            //Asignar el valor a los nodos hijos.
            Text objTexNom=objDoc.createTextNode(txtNom.getText());
            Text objTexMar=objDoc.createTextNode(txtMar.getText());
            Text objTexEst=objDoc.createTextNode(cboEst.getSelectedItem().toString());
            String strMat="";
            if (optMatPla.isSelected())
            {
                strMat="Plástico";
            }
            else if (optMatCue.isSelected())
            {
                strMat="Cuero";
            }
            else
            {
                strMat="Metal";
            }
            Text objTexMat=objDoc.createTextNode(strMat);
            String strSis="";
            if (chkSisDig.isSelected())
            {
                strSis="Digital";
            }
            if (chkSisAna.isSelected())
            {
                strSis+=(strSis.equals("")?"Analógico":", Analógico");
            }
            Text objTexSis=objDoc.createTextNode(strSis);
            Text objTexCom=objDoc.createTextNode(txaCom.getText());
            
            //Agregar los nodos al documento.
            objDoc.getDocumentElement().appendChild(objNodRai);
            objNodRai.appendChild(objNodNom);
            objNodRai.appendChild(objNodMar);
            objNodRai.appendChild(objNodEst);
            objNodRai.appendChild(objNodMat);
            objNodRai.appendChild(objNodSis);
            objNodRai.appendChild(objNodCom);
            objNodNom.appendChild(objTexNom);
            objNodMar.appendChild(objTexMar);
            objNodEst.appendChild(objTexEst);
            objNodMat.appendChild(objTexMat);
            objNodSis.appendChild(objTexSis);
            objNodCom.appendChild(objTexCom);
            Source objSou=new DOMSource(objDoc);
            Result objRes=new StreamResult(new java.io.File(strNomArc));
            Result objResCon=new StreamResult(System.out);
            Transformer objTra=TransformerFactory.newInstance().newTransformer();
            objTra.transform(objSou, objRes);
            objTra.transform(objSou, objResCon);
        }
        catch(Exception e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }

    
    private boolean abrirReloj()
    {
        boolean blnRes=true;
        try
        {
            String strArc;
            JFileChooser objFilCho=new JFileChooser();
            objFilCho.setDialogTitle("Abrir");
            objFilCho.setFileSelectionMode(JFileChooser.FILES_ONLY);
            objFilCho.setCurrentDirectory(new File("C:\\"));
            //Filtrado (Opción 1):
            FileNameExtensionFilter objFilNamExt=new FileNameExtensionFilter("Archivos XML", "xml");
            objFilCho.setFileFilter(objFilNamExt);
            //Filtrado (Opción 2):
    //        objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos de texto", "txt"));
    //        objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos java", "java"));
    //        objFilCho.addChoosableFileFilter(new FileNameExtensionFilter("Archivos php", "php", "php4", "phtml"));
            if (objFilCho.showOpenDialog(this)==JFileChooser.APPROVE_OPTION)
            {
                strArc=objFilCho.getSelectedFile().getPath();
                //Si no tiene la extensión "txt" agregarsela.
    //            if (!strArc.toLowerCase().endsWith(".txt"))
    //                strArc+=".txt";

//                CarMaeVeh objCarMaeVeh=new CarMaeVeh();
//                dskGen.add(objCarMaeVeh, JLayeredPane.DEFAULT_LAYER);
//                objCarMaeVeh.setVisible(true);

                //abrirArcTex(strArc, ((MenArcBloNot)dskGen.getSelectedFrame()).txaPag);
                abrirArcXML(strArc);
                this.setTitle(strArc);
    //            System.out.println("Directorio seleccionado: " + strArc);
    //            System.out.println("Texto: " + ((ifrProPal)dskGen.getSelectedFrame()).txaPag.getText());
            }
            else
            {
                System.out.println("El usuario canceló");
            }
        }
        catch(Exception e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean abrirArcXML(String strNomArc)
    {
        boolean blnRes=true;
        try
        {
            DocumentBuilderFactory obDocBuiFac=DocumentBuilderFactory.newInstance();
            DocumentBuilder objDocBui=obDocBuiFac.newDocumentBuilder();
            Document objDoc=objDocBui.parse(new File(strNomArc));
            objDoc.getDocumentElement().normalize();
//            System.out.println("Nodo raíz: " + objDoc.getDocumentElement().getNodeName());
            NodeList objNodLis=objDoc.getElementsByTagName("Reloj");
            for (int i=0; i<objNodLis.getLength(); i++)
            {
                Node objNodPel=objNodLis.item(i);
                if (objNodPel.getNodeType()==Node.ELEMENT_NODE)
                {
                    Element objEle=(Element)objNodPel;
                    txtNom.setText(getTagValue("Nombre", objEle));
                    txtMar.setText(getTagValue("Marca", objEle));
                    cboEst.setSelectedItem(getTagValue("Estilo", objEle));
                    switch (getTagValue("Material", objEle))
                    {
                        case "Plástico":
                            optMatPla.setSelected(true);
                            break;
                        case "Cuero":
                            optMatCue.setSelected(true);
                            break;
                        case "Metal":
                            optMatMet.setSelected(true);
                            break;
                    }
                    if (getTagValue("Sistema", objEle).indexOf("Digital")!=-1)
                    {
                        chkSisDig.setSelected(true);
                    }
                    if (getTagValue("Sistema", objEle).indexOf("Analógico")!=-1)
                    {
                        chkSisAna.setSelected(true);
                    }
                    txaCom.setText(getTagValue("Comentarios", objEle));
                }
            }
        }
        catch(Exception e)
        {
            System.out.println("Excepción: " + e.toString());
            blnRes=false;
        }
        return blnRes;
    }
    
    private static String getTagValue(String sTag, Element eElement)
    {
        NodeList nlList= eElement.getElementsByTagName(sTag).item(0).getChildNodes();
        Node nValue = (Node) nlList.item(0);
        if (nValue==null)
            return "";
        else
            return nValue.getNodeValue();
    }
    
}
